<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

	<!-- Shiro's main business-tier object for web-enabled applications -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="shiroEhcacheManager" />
		<!-- <property name="sessionManager" ref="shiroSessionManager"/> -->
		<property name="realm" ref="databaseRealm" />
	</bean>
	
	<bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <!-- default:1 hours -->
	    <property name="globalSessionTimeout" value="3600000"/>
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <property name="deleteInvalidSessions" value="false"/>
	</bean>
	

	<!--
	定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作
	用户直接关闭浏览器造成的孤立会话
	
	<bean id="sessionValidationScheduler"
	      class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
	    <property name="interval" value="3600000"/>
	    <property name="sessionManager" ref="sessionManager"/>
	</bean>-->


	<bean id="credentialsMatcher" class="com.ontheroad.service.impl.realm.RetryLimitHashedCredentialsMatcher">
	<constructor-arg ref="shiroEhcacheManager"></constructor-arg>
	<property  name="hashAlgorithmName" value="md5"/>
	 	<property name="hashIterations" value="2"/>
	</bean>

	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
	    <!-- default:1 hours -->
	    <property name="interval" value="1800000"/>
	</bean>

	<!-- 项目自定义Realm，通过注解实现了-->
	<bean id="databaseRealm" class="com.ontheroad.service.impl.realm.DatabaseRealm" >
	 	<property name="authorizationCacheName" value="shiro.authorizationCache"/>
	 	<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	 
	
	<!-- Shiro Filter -->
	 <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 --> 
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<!-- Shiro的核心安全接口,这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<property name="loginUrl" value="/security/login" />
		<property name="successUrl" value="/security/main" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
        <!-- <property name="successUrl" value="/system/main"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
		<property name="unauthorizedUrl" value="/unauthorized" />
		 <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <!--  
       <property name="filterChainDefinitions" value="#{authService.loadFilterChainDefinitions()}"/>
        -->
         <property name="filters"> 
	      <util:map> 
	         <entry key="authc" value-ref="sessionFormAuthenticationFilter"/> 
	      </util:map> 
	   </property> 
		<property name="filterChainDefinitions">
			<value>
                /security/login = anon
                /static/** = anon
                /** = authc
		    </value>
		</property>
	</bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:spring/ehcache-shiro.xml"/>
	</bean>
	
	<!-- Post processor that automatically invokes init() and destroy() methods -->
	 <!-- 保证实现了Shiro内部lifecycle函数的bean执行 --> 
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean id="sessionFormAuthenticationFilter" class="com.ontheroad.web.listener.SessionFormAuthenticationFilter" />
</beans>